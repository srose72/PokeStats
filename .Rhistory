legend(9.4, 99, legend = c("y = 65.531x + -11.821", "R2 = 0.4443"), col = c("red"), lty=c(1), lwd=c(2), cex = 0.8)
plot(pokedex$Weight~pokedex$Height)
abline(-11.821, 65.531, col = "red", lwd = 2)
legend(9.4, 99, legend = c("y = 65.531x + -11.821", "R2 = 0.4443"), col = c("red"), lty=c(1), lwd=c(2), cex = 0.8)
legend(9.3, 99, legend = c("y = 65.531x + -11.821", "R2 = 0.4443"), col = c("red"), lty=c(1), lwd=c(2), cex = 0.8)
plot(pokedex$Weight~pokedex$Height)
abline(-11.821, 65.531, col = "red", lwd = 2)
legend(9.3, 99, legend = c("y = 65.531x + -11.821", "R2 = 0.4443"), col = c("red"), lty=c(1), lwd=c(2), cex = 0.8)
boxplot(mega, nonmega, names = c("Mega", "Non-Mega"))
###Anova for Smogon Tiers
boxplot(pokedex$TotalStat~pokedex$Smogon)
smogon.aov <- aov(pokedex$TotalStat~pokedex$Smogon)
anova(smogon.aov)
TukeyHSD(smogon.aov)
##Height and weight
cor(pokedex$Height, pokedex$Weight)
weight.lm <- lm(Weight ~ Height, data = pokedex)
summary(weight.lm)
plot(pokedex$Weight~pokedex$Height)
abline(-11.821, 65.531, col = "red", lwd = 2)
legend(9.3, 99, legend = c("y = 65.531x + -11.821", "R2 = 0.4443"), col = c("red"), lty=c(1), lwd=c(2), cex = 0.8)
AlolanForms <- subset(pokedex, Form == "Alolan")
qqnorm(AlolanForms$TotalStat)
qqline(AlolanForms$TotalStat)
KantoAlolan <- subset(pokedex, DexNum %in% AlolanForms$DexNum & Generation == 1)
qqnorm(KantoAlolan)
qqnorm(KantoAlolan$TotalStat)
qqline(KantoAlolan$TotalStat)
?t.test
t.test(AlolanForms$TotalStat, KantoAlolan$TotalStat, paired = TRUE, alternative = "two.sided")
qqnorm(AlolanForms$HP)
AlolanForms$HP - KantoAlolan$HP
AlolanForms$Attack - KantoAlolan$Attack
AlolanForms$Defense - KantoAlolan$Defense
AlolanForms$SpAtk - KantoAlolan$Defense
AlolanForms$SpAtk - KantoAlolan$SpAtk
AlolanForms$SpDef - KantoAlolan$SpDef
qqnorm(AlolanForms$SpAtk)
qqline(AlolanForms$SpAtk)
qqnorm(KantoAlolan$SpAtk)
qqline(KantoAlolan$SpAtk)
t.test(AlolanForms$SpAtk, KantoAlolan$SpAtk, paired = TRUE, alternative = "two.sided")
mean(pokedex$Height)
t.test(dragons$Height, mu = mean(pokedex$Height), alternative = "greater")
t.test(dragons$Height, mu = mean(pokedex$Height[pokedex$Type1 != "Dragon" & pokedex$Type2 != "Dragon"]), alternative = "greater")
cor(pokedex$TotalStat, pokedex$CatchRate)
catch.lm <- lm(CatchRate ~ TotalStat, data = pokedex)
summary(catch.lm)
plot(pokedex$CatchRate~pokedex$TotalStat)
abline(-0.09493, 98.79339, col = "red", lwd = 2)
plot(pokedex$CatchRate~pokedex$TotalStat)
abline(-0.09493, 98.79339, col = "red", lwd = 2)
plot(pokedex$Weight~pokedex$Height)
abline(-11.821, 65.531, col = "red", lwd = 2)
plot(pokedex$CatchRate~pokedex$TotalStat)
abline(-0.09493, 98.79339, col = "red", lwd = 2)
squirrels <- read.csv(file.choose())
sqAvg <- read.csv(file.choose())
par(mfrow = c(2,2))
boxplot(squirrels$GUD~squirrels$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(squirrels$GUD[squirrels$SidewalkDist == "Close"])
qqline(squirrels$GUD[squirrels$SidewalkDist == "Close"])
qqnorm(squirrels$GUD[squirrels$SidewalkDist == "Far"])
qqline(squirrels$GUD[squirrels$SidewalkDist == "Far"])
t.test(squirrels$GUD~squirrels$SidewalkDist, paired = FALSE, alternative = "greater")
boxplot(avg$AvgGUD~avg$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
boxplot(avg$AvgGUD~avg$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(avg$AvgGUD[avg$SidewalkDist == "Close"])
qqline(avg$AvgGUD[avg$SidewalkDist == "Close"])
qqnorm(avg$AvgGUD[avg$SidewalkDist == "Far"])
qqline(avg$AvgGUD[avg$SidewalkDist == "Far"])
t.test(avg$AvgGUD~avg$SidewalkDist, paired = FALSE, alternative = "greater")
t.test(squirrels$GUD~squirrels$SidewalkDist[squirrels$GUD != ""], paired = FALSE, alternative = "greater")
t.test(squirrels$GUD[squirrels$GUD != ""]~squirrels$SidewalkDist[squirrels$GUD != ""], paired = FALSE, alternative = "greater")
View(squirrels)
rm(squir_raw)
rm(squirrels_avg)
working <- subset(squirrels, PostWeight != NA)
View(working)
working <- subset(squirrels, is.na(PostWeight) == FALSE)
par(mfrow = c(2,2))
boxplot(working$GUD~working$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
boxplot(working$GUD~working$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(working$GUD[working$SidewalkDist == "Close"])
qqline(working$GUD[working$SidewalkDist == "Close"])
qqnorm(working$GUD[working$SidewalkDist == "Far"])
qqline(working$GUD[working$SidewalkDist == "Far"])
View(avg)
rm(avg)
View(sqAvg)
workingAvg <- subset(sqAvg, AvgGUD != 10)
boxplot(avg$AvgGUD~avg$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
boxplot(workingAvg$AvgGUD~workingAvg$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
qqline(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
qqnorm(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
qqline(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
t.test(workingAvg$AvgGUD~workingAvg$SidewalkDist, paired = FALSE, alternative = "greater")
t.test(workingAvg$AvgGUD~workingAvg$SidewalkDist, paired = TRUE, alternative = "greater")
require(pwr)
?pwr.t.test
pwr.t.test(n = 6, d = 0.5, sig.level = 0.05, power = , type = "paired", alternative = "two.sided")
t.test(working$GUD~working$SidewalkDist, paired = FALSE, alternative = "two.sided")
t.test(workingAvg$AvgGUD~workingAvg$SidewalkDist, paired = TRUE, alternative = "two.sided")
pwr.t.test(n = 6, d = 0.5, sig.level = 0.05, power = , type = "paired", alternative = "two.sided")
t.test(working$GUD~working$SidewalkDist, paired = TRUE, alternative = "two.sided")
pwr.t.test(n = 48, d = 0.5, sig.level = 0.05, power = , type = "paired", alternative = "two.sided")
pwr.t.test(n = 48, d = 0.5, sig.level = 0.05, power = , type = "two.sample", alternative = "two.sided")
boxplot(working$GUD~working$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
boxplot(working$GUD~working$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(working$GUD[working$SidewalkDist == "Close"])
qqline(working$GUD[working$SidewalkDist == "Close"])
close <- working$GUD[working$SidewalkDist == "Close"]
far <- working$GUD[working$SidewalkDist == "Far"]
qqnorm(close^2)
qqnorm(sqrt(close))
qqline(sqrt(close))
qqnorm(log(close))
qqnorm(log(close + 1))
qqnorm(log(close) + 1)
qqnorm(log(close+10))
qqnorm(arcsin(close))
qqnorm(asin(close))
shapiro.test(sqrt(close))
shapiro.test(sqrt(far))
qqnorm(sqrt(close))
qqline(sqrt(close))
boxplot(working$GUD~working$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(sqrt(close))
boxplot(working$GUD~working$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(sqrt(close))
qqline(sqrt(close))
qqnorm(far)
boxplot(working$GUD~working$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
boxplot(working$GUD~working$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(sqrt(close))
qqline(sqrt(close))
qqnorm(sqrt(far))
qqline(sqrt(far))
t.test(sqrt(working$GUD)~working$SidewalkDist, paired = TRUE, alternative = "two.sided")
shapiro.test(sqrt(close + 10))
shapiro.test(sqrt(far + 10))
boxplot(working$GUD~working$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
boxplot(working$GUD~working$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(sqrt(close + 10))
qqline(sqrt(close + 10))
qqnorm(sqrt(far + 10))
qqline(sqrt(far + 10))
shapiro.test(rnorm(100, mean = 5, sd = 3))
shapiro.test(asin(close + 10))
shapiro.test(asin(far))
shapiro.test(asin(close))
shapiro.test(sin(close))
shapiro.test(sin(far))
shapiro.test(log(close))
shapiro.test(log(close + 10))
shapiro.test(log(close + 1))
boxplot(workingAvg$AvgGUD~workingAvg$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
boxplot(workingAvg$AvgGUD~workingAvg$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
qqline(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
shapiro.test(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
shapiro.test(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
qqnorm(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
qqline(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
t.test(workingAvg$AvgGUD~workingAvg$SidewalkDist, paired = TRUE, alternative = "two.sided")
pwr.t.test(n = 6, d = 0.5, sig.level = 0.05, power = , type = "two.sample", alternative = "two.sided")
pwr.t.test(n = 9, d = 0.5, sig.level = 0.05, power = , type = "two.sample", alternative = "two.sided")
pwr.t.test(n = 6, d = 0.5, sig.level = 0.05, power = , type = "two.sample", alternative = "two.sided")
sqAvg <- read.csv(file.choose())
workingAvg <- subset(sqAvg, AvgGUD != 10)
shapiro.test(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
shapiro.test(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
par(mfrow = c(2,2))
boxplot(workingAvg$AvgGUD~workingAvg$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
boxplot(workingAvg$AvgGUD~workingAvg$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
boxplot(workingAvg$AvgGUD~workingAvg$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
qqline(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
qqnorm(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
boxplot(workingAvg$AvgGUD~workingAvg$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
qqline(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
qqnorm(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
qqline(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
boxplot(workingAvg$AvgGUD~workingAvg$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
qqline(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
qqnorm(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
qqline(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
t.test(workingAvg$AvgGUD~workingAvg$SidewalkDist, paired = TRUE, alternative = "two.sided")
sqAvg <- read.csv(file.choose())
shapiro.test(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
workingAvg <- sqAvg #subset(sqAvg, AvgGUD != 10)
shapiro.test(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
shapiro.test(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
par(mfrow = c(2,2))
boxplot(workingAvg$AvgGUD~workingAvg$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
qqline(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
qqnorm(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
qqline(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
pwr.t.test(n = 9, d = 0.5, sig.level = 0.05, power = , type = "two.sample", alternative = "two.sided")
require(pwr)
pwr.t.test(n = 9, d = 0.5, sig.level = 0.05, power = , type = "two.sample", alternative = "two.sided")
t.test(workingAvg$AvgGUD~workingAvg$SidewalkDist, paired = TRUE, alternative = "greater")
pwr.t.test(n = 9, d = 0.5, sig.level = 0.05, power = , type = "two.sample", alternative = "greater")
pwr.t.test(n = 9, d = 0.8, sig.level = 0.05, power = , type = "two.sample", alternative = "greater")
pwr.t.test(n = 9, d = 0.9, sig.level = 0.05, power = , type = "two.sample", alternative = "greater")
pwr.t.test(n = 9, d = 1.0, sig.level = 0.05, power = , type = "two.sample", alternative = "greater")
pwr.t.test(n = , d = 0.5, sig.level = 0.05, power = 0.8, type = "two.sample", alternative = "greater")
pwr.t.test(n = 9, d = , sig.level = 0.05, power = 0.8, type = "two.sample", alternative = "greater")
sd(workingAvg$AvgGUD)
1.225076*3.33715
workingAvg <- subset(sqAvg, Location != "Police Station")
shapiro.test(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
shapiro.test(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
par(mfrow = c(2,2))
boxplot(workingAvg$AvgGUD~workingAvg$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
boxplot(workingAvg$AvgGUD~workingAvg$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
boxplot(workingAvg$AvgGUD~workingAvg$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
par(mfrow = c(2,2))
boxplot(workingAvg$AvgGUD~workingAvg$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
qqline(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
qqnorm(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
qqline(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
t.test(workingAvg$AvgGUD~workingAvg$SidewalkDist, paired = TRUE, alternative = "greater")
par(mfrow = c(1,1))
boxplot(workingAvg$AvgGUD~workingAvg$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
par(mfrow = c(2,1))
qqnorm(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
qqline(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
qqnorm(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
qqline(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
par(mfrow = c(1,1))
qqnorm(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
qqline(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
qqnorm(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
qqline(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
qqnorm(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"], main = "Close")
qqline(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close")
qqline(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
qqnorm(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"], main = "Close")
qqline(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
qqnorm(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"], main = "Far")
qqline(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
t.test(workingAvg$AvgGUD~workingAvg$SidewalkDist, paired = TRUE, alternative = "greater")
View(sqAvg)
0.5*3.33715
1/sd(workingAvg$AvgGUD)
pwr.t.test(n = 9, d = 0.5, sig.level = 0.05, power = 0.8, type = "two.sample", alternative = "greater")
pwr.t.test(n = 9, d = 0.5, sig.level = 0.05, power = , type = "two.sample", alternative = "greater")
pwr.t.test(n = 9, d = 0.8, sig.level = 0.05, power = , type = "two.sample", alternative = "greater")
squirrels <- read.csv(file.choose())
working <- subset(squirrels, is.na(PostWeight) == FALSE)
close <- working$GUD[working$SidewalkDist == "Close"]
far <- working$GUD[working$SidewalkDist == "Far"]
shapiro.test(close)
shapiro.test(far)
boxplot(working$GUD~working$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(close)
qqline(close)
qqnorm(far)
qqline(far)
t.test(sqrt(working$GUD)~working$SidewalkDist, paired = TRUE, alternative = "greater")
t.test(working$GUD~working$SidewalkDist, paired = TRUE, alternative = "greater")
par(mfrow = c(2,2))
boxplot(working$GUD~working$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(close)
qqline(close)
qqnorm(far)
qqline(far)
qqnorm(asin(close))
qqline(asin(close))
shapiro.test(asin(close))
shapiro.test(log(close))
shapiro.test(log(close + 10))
shapiro.test(log(close + 20))
2
shapiro.test(log2(close + 20))
shapiro.test(log10(close + 20))
shapiro.test(sin(close + 20))
shapiro.test(sqrt(close + 20))
shapiro.test(close^2)
wilcox.test(working$GUD~working$SidewalkDist)
wilcox.test(working$GUD~working$SidewalkDist, alternative = "greater")
var(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"])
var(workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"])
close <- workingAvg$AvgGUD[workingAvg$SidewalkDist == "Close"]
far <- workingAvg$AvgGUD[workingAvg$SidewalkDist == "Far"]
boxplot(workingAvg$AvgGUD~workingAvg$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(close - far)
qqline(close - far)
shapiro.test(close - far)
qqnorm(diff)
diff <- close-far
qqnorm(diff)
qqline(diff)
shapiro.test(diff)
qqnorm(sqrt(diff))
shapiro.test(sqrt(diff + 10))
qqnorm(sqrt(diff + 10))
qqline(sqrt(diff + 10))
shapiro.test(log(diff + 10))
qqnorm(log(diff + 10))
qqline(log(diff + 10))
shapiro.test(log2(diff + 10))
shapiro.test(log10(diff + 10))
shapiro.test(asin(diff + 10))
shapiro.test(asin(diff))
shapiro.test(asin(diff + 1))
diff
asin(diff)
shapiro.test(asin(diff/10))
shapiro.test(sin(diff/10))
shapiro.test((diff)^2)
shapiro.test(log(diff + 10))
wilcox.test(working$GUD~working$SidewalkDist, paired = TRUE, alternative = "greater")
mean(close)
mean(far)
sd(close)
sd(far)
pval <- replicate(1000, wilcox.test(rnorm(length(close), mean(close), sd(close)), rnorm(length(far), mean(close), sd(close)))$p.value)
summary(pval)
sum(pval < 0.05)
boxplot(log(workingAvg$AvgGUD + 10)~workingAvg$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(log(diff + 10))
qqline(log(diff + 10))
shapiro.test(log(diff + 10))
boxplot(log(workingAvg$AvgGUD + 10)~workingAvg$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
t.test(log(workingAvg$AvgGUD + 10)~workingAvg$SidewalkDist, paired = TRUE, alternative = "greater")
close <- working$GUD[working$SidewalkDist == "Close"]
far <- working$GUD[working$SidewalkDist == "Far"]
shapiro.test(close)
shapiro.test(far)
boxplot(working$GUD~working$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(asin(close))
qqline(asin(close))
qqnorm(far)
qqline(far)
t.test(working$GUD~working$SidewalkDist, paired = TRUE, alternative = "greater")
wilcox.test(working$GUD~working$SidewalkDist, paired = TRUE, alternative = "greater")
pval <- replicate(1000, wilcox.test(rnorm(length(close), mean(close), sd(close)), rnorm(length(far), mean(close), sd(close)))$p.value)
sum(pval < 0.05)
par(mfrow = c(3,1))
boxplot(working$GUD~working$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
par(mfrow = c(1,3))
boxplot(working$GUD~working$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(asin(close))
qqline(asin(close))
qqnorm(far)
qqline(far)
qqnorm(close, main = "Close")
qqline(close)
qqnorm(far, main = "Far")
boxplot(working$GUD~working$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
boxplot(working$GUD~working$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(close, main = "Close")
qqline(close)
qqnorm(far, main = "Far")
qqline(far)
#t.test(working$GUD~working$SidewalkDist, paired = TRUE, alternative = "greater")
wilcox.test(working$GUD~working$SidewalkDist, paired = FALSE, alternative = "greater")
sum(pval < 0.05)
summary(clsoe)
close <- working$GUD[working$SidewalkDist == "Close"]
squirrels <- read.csv(file.choose())
working <- subset(squirrels, is.na(PostWeight) == FALSE)
close <- working$GUD[working$SidewalkDist == "Close"]
far <- working$GUD[working$SidewalkDist == "Far"]
summary(close)
summary(far)
boxplot(working$GUD~working$StudySite+working$SidewalkDist)
boxplot(working$GUD~working$StudySite+working$SidewalkDist, srt = 70)
boxplot(working$GUD~working$StudySite+working$SidewalkDist, srt = 90)
boxplot(working$GUD~working$StudySite+working$SidewalkDist, las = 2)
boxplot(working$GUD~working$StudySite+working$SidewalkDist, las = 2, mar = c(6, 4.1,4.1,2.1))
boxplot(working$GUD~working$StudySite+working$SidewalkDist, las = 2, mar = c(7, 4.1,4.1,2.1))
boxplot(working$GUD~working$StudySite+working$SidewalkDist, las = 2, mar = c(10, 4.1,4.1,2.1))
summary(close)
summary(far)
summary(working)
summary(working)
summary(close)
summary(far)
working <- subset(squirrels, is.na(PostWeight) == FALSE & GUD <= 13)
close <- working$GUD[working$SidewalkDist == "Close"]
far <- working$GUD[working$SidewalkDist == "Far"]
summary(close)
summary(far)
summary(working)
shapiro.test(close)
shapiro.test(far)
par(mfrow = c(1,3))
boxplot(working$GUD~working$SidewalkDist, xlab = "Distance to Sidewalk", ylab = "GUD")
qqnorm(close, main = "Close")
qqline(close)
qqnorm(far, main = "Far")
qqline(far)
#t.test(working$GUD~working$SidewalkDist, paired = TRUE, alternative = "greater")
wilcox.test(working$GUD~working$SidewalkDist, paired = FALSE, alternative = "greater")
pval <- replicate(1000, wilcox.test(rnorm(length(close), mean(close), sd(close)), rnorm(length(far), mean(close), sd(close)))$p.value)
sum(pval < 0.05)
#t.test(working$GUD~working$SidewalkDist, paired = TRUE, alternative = "greater")
wilcox.test(working$GUD~working$SidewalkDist, paired = FALSE, alternative = "greater")
prop.table(pokedex$Smogon)
table(pokedex$Smogon)
table(pokedex$Smogon)/length(pokedex$Smogon)
table(pokedex$Legendary, pokedex$Generation)
16+5+4
View(Hoenn)
table(Sinnoh$Legendary)/length(Sinnoh$Legendary)
table(pokedex$Legendary/length(Sinnoh$Legendary), pokedex$Generation)
table(pokedex$Legendary, pokedex$Generation)/length(Sinnoh$Legendary)
Kanto <- subset(pokedex, Generation == 1 & Form != "Mega")
Johto <- subset(pokedex, Generation == 2 & Form != "Mega")
Hoenn <- subset(pokedex, Generation == 3 & Form != "Mega")
Sinnoh <- subset(pokedex, Generation == 4 & Form != "Mega")
Kalos <- subset(pokedex, Generation == 6 & Form != "Mega")
Unova <- subset(pokedex, Generation == 5 & Form != "Mega")
Alola <- subset(pokedex, Generation == 7 & Form != "Mega")
table(pokedex$Legendary, pokedex$Generation)/length(Sinnoh$Legendary)
View(Johto)
3.7+.7+1.4
length(Sinnoh$Legendary)
table(pokedex$Legendary, pokedex$Generation)/length(pokedex$Legendary)
table(Johto$Legendary, Johto$Generation)/length(Johto$Legendary)
table(Kanto$Legendary, Kanto$Generation)/length(Kanto$Legendary)
setwd("~/pokemon_stats")
raw <- read.csv("pokedex.csv")
pokedex <- raw
Kanto <- subset(pokedex, Generation == 1)
Kanto <- subset(pokedex, Generation == 1 & Form != "Mega")
Johto <- subset(pokedex, Generation == 2 & Form != "Mega")
Hoenn <- subset(pokedex, Generation == 3 & Form != "Mega")
Sinnoh <- subset(pokedex, Generation == 4 & Form != "Mega")
Unova <- subset(pokedex, Generation == 5 & Form != "Mega")
Kalos <- subset(pokedex, Generation == 6 & Form != "Mega")
Alola <- subset(pokedex, Generation == 7 & Form != "Mega")
table(pokedex$Legendary, pokedex$Generation)
table(Kanto$Legendary, Kanto$Generation)/length(Kanto$Legendary)
table(Johto$Legendary, Johto$Generation)/length(Johto$Legendary)
View(Hoenn)
table(Hoenn$Legendary, Hoenn$Generation)/length(Hoenn$Legendary)
table(Sinnoh$Legendary, Sinnoh$Generation)/length(Sinnoh$Legendary)
table(Unova$Legendary, Unova$Generation)/length(Unova$Legendary)
table(Kalos$Legendary, Kalos$Generation)/length(Kalos$Legendary)
table(Alola$Legendary, Alola$Generation)/length(Alola$Legendary)
length(Kanto)
View(Kanto)
Kanto <- subset(pokedex, Generation == 1 & Form != "Mega")
Johto <- subset(pokedex, Generation == 2 & Form != "Mega")
Hoenn <- subset(pokedex, Generation == 3 & Form != "Mega")
Sinnoh <- subset(pokedex, Generation == 4 & Form != "Mega")
Unova <- subset(pokedex, Generation == 5 & Form != "Mega")
Kalos <- subset(pokedex, Generation == 6 & Form != "Mega")
Alola <- subset(pokedex, Generation == 7 & Form != "Mega")
table(pokedex$Legendary, pokedex$Generation)
View(Kanto)
raw <- read.csv("pokedex.csv")
pokedex <- raw
Kanto <- subset(pokedex, Generation == 1 & Form != "Mega")
Johto <- subset(pokedex, Generation == 2 & Form != "Mega")
Hoenn <- subset(pokedex, Generation == 3 & Form != "Mega")
Sinnoh <- subset(pokedex, Generation == 4 & Form != "Mega")
Unova <- subset(pokedex, Generation == 5 & Form != "Mega")
Kalos <- subset(pokedex, Generation == 6 & Form != "Mega")
Alola <- subset(pokedex, Generation == 7 & Form != "Mega")
View(Kanto)
length(Kanto$Defense)
length(Kanto$DexNum[Kanto$Legendary == "No"])
?table
table(Kanto$Legendary, Kanto$Generation)/length(Kanto$Legendary)
table(Johto$Legendary, Johto$Generation)/length(Johto$Legendary)
table(Sinnoh$Legendary, Sinnoh$Generation)/length(Sinnoh$Legendary)
table(Kanto$Legendary)/length(Kanto$Legendary)
table(Johto$Legendary)/length(Johto$Legendary)
table(Hoenn$Legendary)/length(Hoenn$Legendary)
table(Sinnoh$Legendary)/length(Sinnoh$Legendary)
table(Unova$Legendary)/length(Unova$Legendary)
table(Alola$Legendary)/length(Alola$Legendary)
table(Kalos$Legendary)/length(Kalos$Legendary)
View(pokedex)
grass <- subset(pokedex, Type1 == "Grass" | Type2 == "Grass")
fire <- subset(pokedex, Type1 == "Fire" | Type2 == "Fire")
water <- subset(pokedex, Type1 == "Water" | Type2 == "Water")
poison <- subset(pokedex, Type1 == "Poison" | Type2 == "Poison")
dark <- subset(pokedex, Type1 == "Dark" | Type2 == "Dark")
fairy <- subset(pokedex, Type1 == "Fairy" | Type2 == "Fairy")
steel <- subset(pokedex, Type1 == "Steel" | Type2 == "Steel")
flying <- subset(pokedex, Type1 == "Flying" | Type2 == "Flying")
normal <- subset(pokedex, Type1 == "Normal" | Type2 == "Normal")
dragon <- subset(pokedex, Type1 == "Dragon" | Type2 == "Dragon")
psychic <- subset(pokedex, Type1 == "Psychic" | Type2 == "Psychic")
dragon <- subset(pokedex, Type1 == "Dragon" | Type2 == "Dragon")
psychic <- subset(pokedex, Type1 == "Psychic" | Type2 == "Psychic")
fighting <- subset(pokedex, Type1 == "Fighting" | Type2 == "Fighting")
bug <- subset(pokedex, Type1 == "Bug" | Type2 == "Bug")
ice <- subset(pokedex, Type1 == "Ice" | Type2 == "Ice")
electric <- subset(pokedex, Type1 == "Electric" | Type2 == "Electric")
ground <- subset(pokedex, Type1 == "Ground" | Type2 == "Ground")
rock <- subset(pokedex, Type1 == "Rock" | Type2 == "Rock")
table(grass$Legendary)
table(Hoenn$Legendary)/length(Hoenn$Legendary)
table(Sinnoh$Legendary)/length(Sinnoh$Legendary)
table(grass$Legendary)/length(grass$DexNum)
t.test(Alola, Kanto, alternative = "greater")
t.test(Alola$TotalStat, Kanto$TotalStat, alternative = "two.sided")
t.test(Alola$TotalStat, Kanto$TotalStat, alternative = "greater")
t.test(Alola$TotalStat, Kalos$TotalStat, alternative = "greater")
t.test(Alola$TotalStat, Kanto$TotalStat, alternative = "greater")
